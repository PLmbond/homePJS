
const htdocs_download_url = 'http://resources.profoundjs.com/profoundui_htdocs.zip';
const htdocs_download_size = 67;  // in megabytes

const fs = require('fs');
const fse = require('fs-extra');
const path = require('path');
const request = require('request');
const progress = require('request-progress');
const extract = require('extract-zip');
const crypto = require('crypto');


var setupDir = __dirname;
var dirSep = path.sep;
var dirParts = __dirname.split(dirSep);
while (dirParts.length > 0 && dirParts.pop() !== "node_modules") {};
if (dirParts.length === 0) {
  console.log("Can't find deployment directory.");
  return;
}
var deployDir = dirParts.join(dirSep);
var silent = process.argv.includes("-silent");
if (process.env.SILENT_INSTALL) silent = true;

var portNumber = "8081";  // default port
if (process.env.PORT) portNumber = process.env.PORT;

var readlineInterface;


function downloadHtdocs(htdocsDir, callback) {
  var zipFile = setupDir + dirSep + 'htdocs.zip';
  console.log("");
  console.log("Starting Download...")
  console.log("");
  progress(request(htdocs_download_url), {
    throttle: 2000  // Throttle the progress event to 2000ms, defaults to 1000ms 
  })
  .on('progress', function(state) {
    var mb = (Math.round(state.size.transferred / 10485.76) / 100).toFixed(2);
    var pct = (mb / htdocs_download_size * 100);
    if (pct > 100) pct = 100;
    pct = pct.toFixed(1);
    console.log('Download progress:', mb + " MB (" + pct + "%)");
  })
  .on('error', function(err) {
    console.error("Download ended in error:");
    console.error(err);
    if (typeof callback === "function") callback();
  })
  .on('end', function() {
    console.log("");
    console.log("Download completed. Extracting...")
    extract(zipFile, { dir: htdocsDir }, function(err) {
      if (err) {
        console.error("Extraction ended in error:");
        console.error(err);
      }
      else {
        fs.unlinkSync(zipFile);  // delete zip file after it's unzipped
        console.log("Directory " + htdocsDir + " restored.");
      }
      if (typeof callback === "function") callback();
    })
  })
  .pipe(fs.createWriteStream(zipFile));
}

function ask(questionParm, defaultAnswer, validationFunction, callback) {
  var question = questionParm;
  if (defaultAnswer == null) defaultAnswer = "";
  if (typeof defaultAnswer !== "string") defaultAnswer = String(defaultAnswer);
  
  if (silent) {
    callback(defaultAnswer);
    return;
  }
  
  if (defaultAnswer !== "") {
    var lastChar = question.substr(question.length - 1, 1);
    if (lastChar === ":" || lastChar === "?") {    
      question = question.substr(0, question.length - 1) + " (" + defaultAnswer + ")" + lastChar;
    }
    else {
      question = question + " (" + defaultAnswer + ")" + ":";
    }
  }
  question += " ";

  
  if (readlineInterface == null) {
    readlineInterface = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  readlineInterface.question(question, function(answer) {      
    if (answer == "") answer = defaultAnswer;
    answer = answer.trim();
    if (typeof validationFunction === "function" && validationFunction(answer) === false) {
      ask(questionParm, defaultAnswer, validationFunction, callback);
    }
    else {
      callback(answer);
    }
  });  
}

function fileExists(file) {
  var exists = false;
  try {
    var stat = fs.statSync(file);
    if (stat && stat.isFile()) exists = true;
  }
  catch (err) {
    exists = false;
  }
  return exists;
}

function directoryExists(dir) {
  var exists = false;
  try {
    var stat = fs.statSync(dir);
    if (stat && stat.isDirectory()) exists = true;
  }
  catch (err) {
    exists = false;
  }
  return exists;
}

function copyFile(file, destination, type, process) {
  if (type == null) type = "binary";
  var fileParts = file.split(dirSep);
  var fileName = fileParts[fileParts.length - 1];
  if (directoryExists(destination))
    var toFile = destination + dirSep + fileName;
  else
    var toFile = destination;
  var content = fs.readFileSync(file, type);
  if (typeof process === "function") content = process(content);
  fs.writeFileSync(toFile, content, type);
}

function copyDir(dir, destinationDir) {
  var dirParts = dir.split(dirSep);
  var dirName = dirParts[dirParts.length - 1];
  fs.mkdirSync(destinationDir + dirSep + dirName);
  files = fs.readdirSync(dir);
  files.forEach(function(file, index) {
    if(fs.lstatSync(dir + dirSep + file).isDirectory()) { // recurse
      copyDir(dir + dirSep + file, destinationDir + dirSep + dirName);
    } 
    else {
      copyFile(dir + dirSep + file, destinationDir + dirSep + dirName, null, null);
    }
  });
}


function createPackageFile() {
  if (fileExists(deployDir + dirSep + "package.json")) {
    console.log("package.json file exists.");
  } 
  else {    
    copyFile(setupDir + dirSep + "package.json", deployDir, "utf8");
    console.log("package.json created automatically with defaults.");
  }
}

function createStart(callback) {
  if (fileExists(deployDir + dirSep + "start.js")) {
      console.log("start.js file exists.");
    callback();
  } 
  else {
    copyFile(setupDir + dirSep + "start.js", deployDir, "utf8");
    console.log("start.js created.");
    callback();
  }
}

function createCall(callback) {
  if (fileExists(deployDir + dirSep + "call.js")) {
      console.log("call.js file exists.");
    callback();
  } 
  else {
    copyFile(setupDir + dirSep + "call.js", deployDir, "utf8");
    console.log("call.js created.");
    callback();
  }
}

function createUpdatepui(callback) {
  if (process.platform === 'aix') {  // IBM i
    // This file is not needed on IBM i because the proper way to install Profound UI on IBM i is to download the full version from the web site
    callback();
    return;
  }
  if (fileExists(deployDir + dirSep + "updatepui.js")) {
      console.log("updatepui.js file exists.");
    callback();
  } 
  else {
    copyFile(setupDir + dirSep + "updatepui.js", deployDir, "utf8");
    console.log("updatepui.js created.");
    callback();
  }
}

function createStoreCredentials(callback) {

  if (fileExists(deployDir + dirSep + "store_credentials.js")) {
    console.log("store_credentials.js file exists.");
    callback();
  } 
  else {
    copyFile(setupDir + dirSep + "store_credentials.js", deployDir, "utf8");
    console.log("store_credentials.js created.");
    callback();
  }  
  
}

function createModulesDirectory() {
  if (directoryExists(deployDir + dirSep + "modules")) {
    console.log("modules directory exists.");
  }
  else {
    console.log("Creating modules directory.");
    fs.mkdirSync(deployDir + dirSep + "modules");
  }
}

function createPuiscreens() {

  // Check which version of puiscreens.json is installed.
  // Version 4.7.0 ships with a new version of puiscreens where the bound fields (SSUSER, SSPASSWORD, SSSUBMIT, SSERROR, etc) are now lower case,
  // so this would be a breaking change. So our install logic is now as follows: -
  // 1. Check the SHA key of existing puiscreens.json.
  // 2. If it's an official PJS screen, no customizations have been made, so it's safe to replace with this version.
  // 3. If it's not an official version, check if we have lower case User & Password. If not, then backup existing version to puiscreens_bak.json and install this official version.
  // 4. Otherwise it's not an official version but should work OK. So leave existing puiscreens.json, and check if we already have a puiscreens_orig.json, and 
  //    create it if not.
  var targetPuiScreensFile = deployDir + dirSep + "modules" + dirSep + "puiscreens.json";
  if (fileExists(targetPuiScreensFile)) {

    var data = fs.readFileSync(targetPuiScreensFile);
    var checksum = crypto.createHash('sha512').update(data).digest('hex');  // sha512 best for 64-bit
    
    switch (checksum) {
      case "4fb38daa851aacd21cf3aeaa92304df4e0353cae2b6dab3a5fd53c0cf4d42875b5efadbb4bb29642cbff07bfdd8e1c7a9c107f582905f7fc798c3841e888ee61":
        console.log("Found Standard puiscreens.json file version <= 4.6.1, replacing with current version...");
        copyFile(setupDir + dirSep + "modules" + dirSep + "puiscreens.json", targetPuiScreensFile, "utf8");
        console.log("puiscreens.json file was replaced.");
        break;
      case "2e63c0e9816f52b515c45479ada102af806bc73b79d14109567500c529bfaa166fb981ddb6062a1ba0a7f8e36a11d674a955d2f003806f21165cb26ad0fbdf33":
        console.log("Found Standard puiscreens.json file version >= 4.7.0, no need for update.");
        break;
      default:
        var puiScreens = JSON.parse(data);
        console.log("Found Customized puiscreens.json file, analysing contents...");

        // We need to check the signon screen and make sure we have lower case bound fields
        var goodUser = false, goodPassword = false, goodSubmit = false, goodError = false, goodExit = false;

        formats:
        for (i in puiScreens.formats) {
          var format = puiScreens.formats[i];

          if (format.screen["record format name"].toLowerCase() === "signonscrn") {
            for (j in format.items) {
              var itemValue = format.items[j].value;
              if (itemValue) {
                if (itemValue.fieldName === "ssuser") goodUser = true;
                if (itemValue.fieldName === "sspassword") goodPassword = true;
                if (itemValue.fieldName === "sssubmit") goodSubmit = true;
                if (itemValue.fieldName === "sserror") goodError = true;
                if (itemValue.fieldName === "ssexit") goodExit = true;
                if (goodUser && goodPassword && goodSubmit && goodError && goodExit) break formats;
              }
            }
            break;
          }
        }

        if (goodUser && goodPassword && goodSubmit && goodError && goodExit) {
          if (fileExists(deployDir + dirSep + "modules" + dirSep + "puiscreens_orig.json")) {
            // If there is already a puiscreens_orig.json file, it has already been upgraded, so we can skip this
            console.log("The Customized puiscreens.json file is compatible.");
          }
          else {
            console.log("The Customized puiscreens.json file is compatible, so leaving it in place. Creating puiscreens_orig.json");
            copyFile(setupDir + dirSep + "modules" + dirSep + "puiscreens.json", deployDir + dirSep + "modules" + dirSep + "puiscreens_orig.json", "utf8");
            console.log("puiscreens_orig.json created. For latest functionality, please migrate standard fields into your customized version.");
          }
        }
        else {
          console.log("The Customized puiscreens.json file is NOT compatible, backing it up to puiscreens_bak.json...");
          copyFile(deployDir + dirSep + "modules" + dirSep + "puiscreens.json", deployDir + dirSep + "modules" + dirSep + "puiscreens_bak.json", "utf8");
          console.log("puiscreens_bak.json created. Creating puiscreens.json ...");
          copyFile(setupDir + dirSep + "modules" + dirSep + "puiscreens.json", targetPuiScreensFile, "utf8");
          console.log("puiscreens.json created. Please migrate standard fields into your customized version.");
        }
    }
  }
  else {
    console.log("Creating puiscreens.json.");
    copyFile(setupDir + dirSep + "modules" + dirSep + "puiscreens.json", targetPuiScreensFile, "utf8");
  }
}

function createPUIUPLEXIT() {
  if (fileExists(deployDir + dirSep + "modules" + dirSep + "puiuplexit.js")) {
    console.log("puiuplexit.js file exists.");
  } 
  else {
    console.log("Creating puiuplexit.js.");
    copyFile(setupDir + dirSep + "modules" + dirSep + "puiuplexit.js", deployDir + dirSep + "modules", "utf8");
  }
}

function copyPjssamples() {
  if (directoryExists(deployDir + dirSep + "modules" + dirSep + "pjssamples"))
    fse.removeSync(deployDir + dirSep + "modules" + dirSep + "pjssamples");
  console.log("Copying pjssamples.");
  copyDir(setupDir + dirSep + "modules" + dirSep + "pjssamples",  deployDir + dirSep + "modules");    
}

function validateName(name) {
  var msg = null;
  name = name.toUpperCase();
  var firstChar = name.substr(0, 1);  

  if ((firstChar < "A" || firstChar > "Z") && firstChar != "#" && firstChar != "@" && firstChar != "$") {
    console.log("Name must start with an alpha character.");
    return false;
  }
  for (var i = 1; i < name.length; i++) {
    var chr = name.substr(i, 1);
    if ((chr < "A" || chr > "Z") && (chr < "0" || chr > "9") && chr != "#" && chr != "@" && chr != "$" && chr != "_" && chr != ".") {
      console.log("Name contains invalid characters.");
      return false;
    }        
  }

  if (name.length > 10) {
    console.log("Name must be less than 10 characters.");
    return false;
  }

  return true;
}

function isURL(path) {
  if (typeof path !== "string") return false;
  path = path.toLowerCase();
  if (path.substr(0, 7) === "http://") return true;
  if (path.substr(0, 8) === "https://") return true;
  return false;
}

function validateDirectory(directory) {
  if (process.platform === 'aix') {  // IBM i
    var ch = directory.substr(0, 1);
    if (ch !== "/" && ch !== "\\" && !isURL(directory)) {
      directory = deployDir + dirSep + directory;
    }
    if (!directoryExists(directory) && !isURL(directory)) {
      console.log("WARNING: The specified directory was not found. You can create it later or modify the staticFilesDirectory property in config.js.");
      console.log("");
    }
  }
  return true;  // accept any entry - if directory doesn't exist, simply warn
}

function validatePort(port) {
  if (port === "0") return true;
  port = Number(port);
  if (!isNaN(port) && port >= 1 && port <= 65535) return true;
  console.log("Invalid port number. Valid range is 0-65535.");
  return false;
}

function validateYesNo(answer) {
  answer = answer.toUpperCase();
  if (answer === "Y" || answer === "YES" || answer === "N" || answer === "NO") return true;
  console.log("Invalid answer. Use y or n.");
  return false;
}

function createConfig(connectorLibrary, callback) {

  if (fileExists(deployDir + dirSep + "config.js")) {

    // If the config already exists, check if it contains a connectorLibrary setting
    if (connectorLibrary && connectorLibrary !== "*NONE") {

      const config = require(deployDir + dirSep + "config.js");

      if (config.connectorLibrary) {
        if (config.connectorLibrary === connectorLibrary)
          console.log("config.js file exists, and already has a matching connectorLibrary setting.");
        else {
          console.log("***WARNING - config.js file exists, but the existing connectorLibrary setting (" + config.connectorLibrary +
            ") does not match the connectorLibrary you just specified (" + connectorLibrary + ").");
        }
        callback();
      }
      else {
        console.log("config.js file exists, but does NOT have a connectorLibrary setting, creating one now...");
        config.connectorLibrary = connectorLibrary;
        fs.writeFile(deployDir + dirSep + "config.js", "\nmodule.exports = " + JSON.stringify(config, null, "  ") + "\n", (err) => {
          if (err) 
            console.log('An error occurred updating config.js file : ' + err);;
          console.log('config.js file has been updated.');
          callback();
        });
      }
    }
    else {
      console.log("config.js file exists.");
      callback();
    }
  }
  else {    
    
    var defaultStaticDir = "htdocs";
    if (process.platform === 'aix') {  // IBM i
      defaultStaticDir = "/www/profoundui/htdocs";
      if (!directoryExists(defaultStaticDir)) {
        console.log("WARNING: Profound UI Installation not found in default location.");
      }
    }
    else {
      console.log("");
      console.log("You can provide the Profound UI directory as a remote URL (e.g. http://myibmi:8080) or as a local directory name. If the directory does not exist, the installer can create it for you.");
      console.log("");
    }
    
    ask("Specify Profound UI static files directory", defaultStaticDir, validateDirectory, function(staticDir) {
      ask("Specify port number for Profound.js server", portNumber, validatePort, function(newPortNumber) {
        copyFile(setupDir + dirSep + "config.js", deployDir, "utf8", function(content) {
          var config = content.substr(content.indexOf("{"));
          eval("config = " + config);
          config.staticFilesDirectory = staticDir;
          config.port = Number(newPortNumber);
          if (connectorLibrary && connectorLibrary !== "*NONE")
            config.connectorLibrary = connectorLibrary;
          portNumber = newPortNumber;
          content = "\nmodule.exports = ";
          content += JSON.stringify(config, null, "  ");
          content += "\n";
          return content;
        });
        console.log("");
        console.log("config.js created.");
        console.log("");
        
        if (process.platform !== 'aix' && !isURL(staticDir)) {
          var absoluteStaticDir = path.resolve(deployDir, staticDir);
          if (!directoryExists(absoluteStaticDir)) {
            console.log("");
            console.log("The specified directory for Profound UI was not found.");
            ask("Should the installer create the directory and download a copy of Profound UI static files?", "y", validateYesNo, function(answer) {
              if (answer.toUpperCase() == "Y") {
                downloadHtdocs(absoluteStaticDir, callback);
              }
              else {
                callback();
              }
            });
          }
          else {        
            callback();
          }
        }
        else {
          callback();
        }
      });
    });
  }
}

function finish() {
  if (readlineInterface != null) {
    readlineInterface.close();
    process.stdin.destroy();
  }
  console.log("");
  process.exit(0);
}

function runCommand(command, switches) {
  console.log("");
  console.log("Executing command: " + command);
  const child_process = require("child_process");
  var args = [command];
  if (typeof switches == "string")
    args.unshift(switches);
  else 
    args.unshift("-e");
  
  // Many IBM commands cannot run in multi-threaded mode...
  var options = {stdio: "inherit", cwd: setupDir, env: {QIBM_USE_DESCRIPTOR_STDIO:"Y", QIBM_MULTI_THREADED:"N"}};
  
  var results = child_process.spawnSync(
    "system",
    args,
    options);
    
  var code = results.status;
  var signal = results.signal;

  if (code != null) {    
    if (code === 0) {
      console.log("Command finished successfully.");
      return true;
    }
    else {
      console.log("Process exited, code %d", code);
    }
  }
  else {
    console.log("Process ended due to signal %s", signal);
    console.log(results);  // show full results including detailed error
  }
  return false;
}

function askConnector(callback) {

  ask("Install Profound.js Connector IBM i ILE components?", "y", validateYesNo, function(answer) {
  
    if (answer.toUpperCase() == "Y") {
      
      ask("Enter Profound.js Connector library name:", "PROFOUNDJS", validateName, function(answer) {    
      
        callback(answer.toUpperCase().substr(0, 10));
      
      });
      
    }
    else {
      
      callback("*NONE");
      
    }
  
  });
 
}

function askServerInstance(callback) {

  ask("Create/replace server instance configuration for STRTCPSVR/ENDTCPSVR commands?", "y", validateYesNo, function(answer) {
  
    if (answer.toUpperCase() == "Y") {
      
      ask("Server instance name:", "PROFOUNDJS", validateName, function(answer) {
      
        var svrname = answer.toUpperCase().substr(0, 10);
        ask("Autostart server instance when TCP/IP starts?", "y", validateYesNo, function(answer) {
          
          var autostart = (answer.toUpperCase() == "Y");
          callback(svrname, autostart);
          
        });
      
      });
      
    }
    else {
      
      callback("*NONE");
      
    }
  
  });
 
}


createPackageFile();
createModulesDirectory();
createPuiscreens();
createPUIUPLEXIT();
copyPjssamples();

createStoreCredentials(function() {
  createUpdatepui(function() {
    createCall(function() {
      createStart(function() {
        if (process.platform === 'aix' && !silent) {  // IBM i
          console.log("");
          askConnector(function(connectorLibrary) {
            createConfig(connectorLibrary, function() {
              askServerInstance(function(svrname, autostart) {
                if (connectorLibrary != "*NONE" || svrname != "*NONE") {
                  // First, try copying the save file
                  var success = runCommand("CPYFRMSTMF FROMSTMF('" + setupDir + dirSep + "pjsdist.savf') TOMBR('/QSYS.LIB/QGPL.LIB/PJSDIST.FILE') MBROPT(*REPLACE)");
                  if (success) {
                    // Now, try restoring the PJSINSTALL program
                    success = runCommand("RSTOBJ OBJ(PJSINSTALL) SAVLIB(PJSDIST) DEV(*SAVF) OBJTYPE(*ALL) SAVF(QGPL/PJSDIST) RSTLIB(QGPL)");
                    if (success) {
                      // Now, try running PJSINSTALL
                      var command = "QGPL/PJSINSTALL CONNLIB(" + connectorLibrary + ")";
                      if (connectorLibrary != "*NONE")
                        command += " CONNHOST('localhost') CONNPORT(" + portNumber + ")";
                      if (svrname != "*NONE")
                        command += " SVRNAME(" + svrname + ") SVRDIR('" + deployDir + "') " +
                          "SVRAUTO(" + ((autostart) ? "*YES" : "*NO") + ")";
                      success = runCommand(command, "-Ke");
                      // Clean up program and save file
                      console.log("");
                      console.log("Cleaning up...");
                      runCommand("DLTPGM PGM(QGPL/PJSINSTALL)");
                      runCommand("DLTCMD CMD(QGPL/PJSINSTALL)");
                      runCommand("DLTPNLGRP PNLGRP(QGPL/PJSINSTALL)");
                      runCommand("DLTMSGF MSGF(QGPL/PJSINSTALL)");
                      runCommand("DLTF FILE(QGPL/PJSDIST)");
                      console.log("");
                      if (success) {
                        console.log("Profound.js successfully installed.");
                      }
                      else {
                        console.log("Profound.js did NOT install successfully! Check messages above.");
                      }
                    }
                    else {
                      // Clean up save file
                      console.log("");
                      console.log("Cleaning up...");
                      runCommand("DLTF FILE(QGPL/PJSDIST)");
                      console.log("");
                      console.log("Profound.js did NOT install successfully! Check messages above.");
                    }
                  }
                  else {
                    console.log("");
                    console.log("Profound.js did NOT install successfully! Check messages above.");
                  }
                  finish();
                }
                else {
                  finish();
                }
              });
            });
          });
        }
        else {
          createConfig(null, function() {
            console.log("");
            console.log("Installation completed.");
            finish();
          });
        }
      });
    });
  });
});
